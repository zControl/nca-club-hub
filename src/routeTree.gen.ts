/* eslint-disable */

// @ts-nocheck

// noinspection JSUnusedGlobalSymbols

// This file was automatically generated by TanStack Router.
// You should NOT make any changes in this file as it will be overwritten.
// Additionally, you should also exclude this file from your linter and/or formatter to prevent it from being checked or modified.

import { createFileRoute } from '@tanstack/react-router'

// Import Routes

import { Route as rootRoute } from './routes/__root'
import { Route as IndexImport } from './routes/index'
import { Route as testTestImport } from './routes/(test)/_test'
import { Route as testExamplesImport } from './routes/(test)/_examples'
import { Route as authLoginImport } from './routes/(auth)/login'
import { Route as appPublicImport } from './routes/(app)/_public'
import { Route as testTestTestImport } from './routes/(test)/_test/test_'
import { Route as appPublicPublicIndexImport } from './routes/(app)/_public/public.index'
import { Route as testTestTestAImport } from './routes/(test)/_test/test.a_'
import { Route as testTestTestASomethingImport } from './routes/(test)/_test/test.a.something'
import { Route as testTestTestABImport } from './routes/(test)/_test/test.a.b_'
import { Route as testTestTestABCImport } from './routes/(test)/_test/test.a.b.c'

// Create Virtual Routes

const testImport = createFileRoute('/(test)')()
const appImport = createFileRoute('/(app)')()
const appUnauthorizedLazyImport = createFileRoute('/(app)/unauthorized')()
const appTermsLazyImport = createFileRoute('/(app)/terms')()
const appStatusLazyImport = createFileRoute('/(app)/status')()
const appPrivacyLazyImport = createFileRoute('/(app)/privacy')()
const testExamplesExamplesLazyImport = createFileRoute(
  '/(test)/_examples/examples_',
)()
const appPublicTryoutsLazyImport = createFileRoute('/(app)/_public/tryouts')()
const appPublicTeamsLazyImport = createFileRoute('/(app)/_public/teams')()
const appPublicScheduleLazyImport = createFileRoute('/(app)/_public/schedule')()
const appPublicResourcesLazyImport = createFileRoute(
  '/(app)/_public/resources',
)()
const appPublicRebelrecLazyImport = createFileRoute(
  '/(app)/_public/rebelrec_',
)()
const appPublicMonsterLazyImport = createFileRoute('/(app)/_public/monster')()
const appPublicMissionLazyImport = createFileRoute('/(app)/_public/mission')()
const appPublicJoinLazyImport = createFileRoute('/(app)/_public/join')()
const appPublicInvestmentLazyImport = createFileRoute(
  '/(app)/_public/investment',
)()
const appPublicFieldsLazyImport = createFileRoute('/(app)/_public/fields')()
const appPublicContactLazyImport = createFileRoute('/(app)/_public/contact')()
const appPublicAboutLazyImport = createFileRoute('/(app)/_public/about')()
const testExamplesExamplesTypographyLazyImport = createFileRoute(
  '/(test)/_examples/examples/typography',
)()
const testExamplesExamplesTablesLazyImport = createFileRoute(
  '/(test)/_examples/examples/tables',
)()
const testExamplesExamplesQueryLazyImport = createFileRoute(
  '/(test)/_examples/examples/query',
)()
const testExamplesExamplesNavigationLazyImport = createFileRoute(
  '/(test)/_examples/examples/navigation',
)()
const testExamplesExamplesLoadersLazyImport = createFileRoute(
  '/(test)/_examples/examples/loaders',
)()
const testExamplesExamplesFormsLazyImport = createFileRoute(
  '/(test)/_examples/examples/forms',
)()
const testExamplesExamplesDialogsLazyImport = createFileRoute(
  '/(test)/_examples/examples/dialogs',
)()
const testExamplesExamplesDatabaseLazyImport = createFileRoute(
  '/(test)/_examples/examples/database',
)()
const testExamplesExamplesContainersLazyImport = createFileRoute(
  '/(test)/_examples/examples/containers',
)()
const testExamplesExamplesColorsLazyImport = createFileRoute(
  '/(test)/_examples/examples/colors',
)()
const testExamplesExamplesBasicLazyImport = createFileRoute(
  '/(test)/_examples/examples/basic',
)()
const appPublicRebelrecRegistrationLazyImport = createFileRoute(
  '/(app)/_public/rebelrec/registration',
)()
const appPublicRebelrecFaqLazyImport = createFileRoute(
  '/(app)/_public/rebelrec/faq',
)()
const appPublicRebelrecCupLazyImport = createFileRoute(
  '/(app)/_public/rebelrec/cup',
)()
const appPublicRebelrecAboutLazyImport = createFileRoute(
  '/(app)/_public/rebelrec/about',
)()

// Create/Update Routes

const testRoute = testImport.update({
  id: '/(test)',
  getParentRoute: () => rootRoute,
} as any)

const appRoute = appImport.update({
  id: '/(app)',
  getParentRoute: () => rootRoute,
} as any)

const IndexRoute = IndexImport.update({
  id: '/',
  path: '/',
  getParentRoute: () => rootRoute,
} as any)

const appUnauthorizedLazyRoute = appUnauthorizedLazyImport
  .update({
    id: '/unauthorized',
    path: '/unauthorized',
    getParentRoute: () => appRoute,
  } as any)
  .lazy(() => import('./routes/(app)/unauthorized.lazy').then((d) => d.Route))

const appTermsLazyRoute = appTermsLazyImport
  .update({
    id: '/terms',
    path: '/terms',
    getParentRoute: () => appRoute,
  } as any)
  .lazy(() => import('./routes/(app)/terms.lazy').then((d) => d.Route))

const appStatusLazyRoute = appStatusLazyImport
  .update({
    id: '/status',
    path: '/status',
    getParentRoute: () => appRoute,
  } as any)
  .lazy(() => import('./routes/(app)/status.lazy').then((d) => d.Route))

const appPrivacyLazyRoute = appPrivacyLazyImport
  .update({
    id: '/privacy',
    path: '/privacy',
    getParentRoute: () => appRoute,
  } as any)
  .lazy(() => import('./routes/(app)/privacy.lazy').then((d) => d.Route))

const testTestRoute = testTestImport.update({
  id: '/_test',
  getParentRoute: () => testRoute,
} as any)

const testExamplesRoute = testExamplesImport.update({
  id: '/_examples',
  getParentRoute: () => testRoute,
} as any)

const authLoginRoute = authLoginImport.update({
  id: '/(auth)/login',
  path: '/login',
  getParentRoute: () => rootRoute,
} as any)

const appPublicRoute = appPublicImport.update({
  id: '/_public',
  getParentRoute: () => appRoute,
} as any)

const testExamplesExamplesLazyRoute = testExamplesExamplesLazyImport
  .update({
    id: '/examples_',
    path: '/examples',
    getParentRoute: () => testExamplesRoute,
  } as any)
  .lazy(() =>
    import('./routes/(test)/_examples/examples_.lazy').then((d) => d.Route),
  )

const appPublicTryoutsLazyRoute = appPublicTryoutsLazyImport
  .update({
    id: '/tryouts',
    path: '/tryouts',
    getParentRoute: () => appPublicRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/_public/tryouts.lazy').then((d) => d.Route),
  )

const appPublicTeamsLazyRoute = appPublicTeamsLazyImport
  .update({
    id: '/teams',
    path: '/teams',
    getParentRoute: () => appPublicRoute,
  } as any)
  .lazy(() => import('./routes/(app)/_public/teams.lazy').then((d) => d.Route))

const appPublicScheduleLazyRoute = appPublicScheduleLazyImport
  .update({
    id: '/schedule',
    path: '/schedule',
    getParentRoute: () => appPublicRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/_public/schedule.lazy').then((d) => d.Route),
  )

const appPublicResourcesLazyRoute = appPublicResourcesLazyImport
  .update({
    id: '/resources',
    path: '/resources',
    getParentRoute: () => appPublicRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/_public/resources.lazy').then((d) => d.Route),
  )

const appPublicRebelrecLazyRoute = appPublicRebelrecLazyImport
  .update({
    id: '/rebelrec_',
    path: '/rebelrec',
    getParentRoute: () => appPublicRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/_public/rebelrec_.lazy').then((d) => d.Route),
  )

const appPublicMonsterLazyRoute = appPublicMonsterLazyImport
  .update({
    id: '/monster',
    path: '/monster',
    getParentRoute: () => appPublicRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/_public/monster.lazy').then((d) => d.Route),
  )

const appPublicMissionLazyRoute = appPublicMissionLazyImport
  .update({
    id: '/mission',
    path: '/mission',
    getParentRoute: () => appPublicRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/_public/mission.lazy').then((d) => d.Route),
  )

const appPublicJoinLazyRoute = appPublicJoinLazyImport
  .update({
    id: '/join',
    path: '/join',
    getParentRoute: () => appPublicRoute,
  } as any)
  .lazy(() => import('./routes/(app)/_public/join.lazy').then((d) => d.Route))

const appPublicInvestmentLazyRoute = appPublicInvestmentLazyImport
  .update({
    id: '/investment',
    path: '/investment',
    getParentRoute: () => appPublicRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/_public/investment.lazy').then((d) => d.Route),
  )

const appPublicFieldsLazyRoute = appPublicFieldsLazyImport
  .update({
    id: '/fields',
    path: '/fields',
    getParentRoute: () => appPublicRoute,
  } as any)
  .lazy(() => import('./routes/(app)/_public/fields.lazy').then((d) => d.Route))

const appPublicContactLazyRoute = appPublicContactLazyImport
  .update({
    id: '/contact',
    path: '/contact',
    getParentRoute: () => appPublicRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/_public/contact.lazy').then((d) => d.Route),
  )

const appPublicAboutLazyRoute = appPublicAboutLazyImport
  .update({
    id: '/about',
    path: '/about',
    getParentRoute: () => appPublicRoute,
  } as any)
  .lazy(() => import('./routes/(app)/_public/about.lazy').then((d) => d.Route))

const testTestTestRoute = testTestTestImport.update({
  id: '/test_',
  path: '/test',
  getParentRoute: () => testTestRoute,
} as any)

const appPublicPublicIndexRoute = appPublicPublicIndexImport.update({
  id: '/public/',
  path: '/public/',
  getParentRoute: () => appPublicRoute,
} as any)

const testExamplesExamplesTypographyLazyRoute =
  testExamplesExamplesTypographyLazyImport
    .update({
      id: '/examples/typography',
      path: '/examples/typography',
      getParentRoute: () => testExamplesRoute,
    } as any)
    .lazy(() =>
      import('./routes/(test)/_examples/examples.typography.lazy').then(
        (d) => d.Route,
      ),
    )

const testExamplesExamplesTablesLazyRoute = testExamplesExamplesTablesLazyImport
  .update({
    id: '/examples/tables',
    path: '/examples/tables',
    getParentRoute: () => testExamplesRoute,
  } as any)
  .lazy(() =>
    import('./routes/(test)/_examples/examples.tables.lazy').then(
      (d) => d.Route,
    ),
  )

const testExamplesExamplesQueryLazyRoute = testExamplesExamplesQueryLazyImport
  .update({
    id: '/examples/query',
    path: '/examples/query',
    getParentRoute: () => testExamplesRoute,
  } as any)
  .lazy(() =>
    import('./routes/(test)/_examples/examples.query.lazy').then(
      (d) => d.Route,
    ),
  )

const testExamplesExamplesNavigationLazyRoute =
  testExamplesExamplesNavigationLazyImport
    .update({
      id: '/examples/navigation',
      path: '/examples/navigation',
      getParentRoute: () => testExamplesRoute,
    } as any)
    .lazy(() =>
      import('./routes/(test)/_examples/examples.navigation.lazy').then(
        (d) => d.Route,
      ),
    )

const testExamplesExamplesLoadersLazyRoute =
  testExamplesExamplesLoadersLazyImport
    .update({
      id: '/examples/loaders',
      path: '/examples/loaders',
      getParentRoute: () => testExamplesRoute,
    } as any)
    .lazy(() =>
      import('./routes/(test)/_examples/examples.loaders.lazy').then(
        (d) => d.Route,
      ),
    )

const testExamplesExamplesFormsLazyRoute = testExamplesExamplesFormsLazyImport
  .update({
    id: '/examples/forms',
    path: '/examples/forms',
    getParentRoute: () => testExamplesRoute,
  } as any)
  .lazy(() =>
    import('./routes/(test)/_examples/examples.forms.lazy').then(
      (d) => d.Route,
    ),
  )

const testExamplesExamplesDialogsLazyRoute =
  testExamplesExamplesDialogsLazyImport
    .update({
      id: '/examples/dialogs',
      path: '/examples/dialogs',
      getParentRoute: () => testExamplesRoute,
    } as any)
    .lazy(() =>
      import('./routes/(test)/_examples/examples.dialogs.lazy').then(
        (d) => d.Route,
      ),
    )

const testExamplesExamplesDatabaseLazyRoute =
  testExamplesExamplesDatabaseLazyImport
    .update({
      id: '/examples/database',
      path: '/examples/database',
      getParentRoute: () => testExamplesRoute,
    } as any)
    .lazy(() =>
      import('./routes/(test)/_examples/examples.database.lazy').then(
        (d) => d.Route,
      ),
    )

const testExamplesExamplesContainersLazyRoute =
  testExamplesExamplesContainersLazyImport
    .update({
      id: '/examples/containers',
      path: '/examples/containers',
      getParentRoute: () => testExamplesRoute,
    } as any)
    .lazy(() =>
      import('./routes/(test)/_examples/examples.containers.lazy').then(
        (d) => d.Route,
      ),
    )

const testExamplesExamplesColorsLazyRoute = testExamplesExamplesColorsLazyImport
  .update({
    id: '/examples/colors',
    path: '/examples/colors',
    getParentRoute: () => testExamplesRoute,
  } as any)
  .lazy(() =>
    import('./routes/(test)/_examples/examples.colors.lazy').then(
      (d) => d.Route,
    ),
  )

const testExamplesExamplesBasicLazyRoute = testExamplesExamplesBasicLazyImport
  .update({
    id: '/examples/basic',
    path: '/examples/basic',
    getParentRoute: () => testExamplesRoute,
  } as any)
  .lazy(() =>
    import('./routes/(test)/_examples/examples.basic.lazy').then(
      (d) => d.Route,
    ),
  )

const appPublicRebelrecRegistrationLazyRoute =
  appPublicRebelrecRegistrationLazyImport
    .update({
      id: '/rebelrec/registration',
      path: '/rebelrec/registration',
      getParentRoute: () => appPublicRoute,
    } as any)
    .lazy(() =>
      import('./routes/(app)/_public/rebelrec.registration.lazy').then(
        (d) => d.Route,
      ),
    )

const appPublicRebelrecFaqLazyRoute = appPublicRebelrecFaqLazyImport
  .update({
    id: '/rebelrec/faq',
    path: '/rebelrec/faq',
    getParentRoute: () => appPublicRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/_public/rebelrec.faq.lazy').then((d) => d.Route),
  )

const appPublicRebelrecCupLazyRoute = appPublicRebelrecCupLazyImport
  .update({
    id: '/rebelrec/cup',
    path: '/rebelrec/cup',
    getParentRoute: () => appPublicRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/_public/rebelrec.cup.lazy').then((d) => d.Route),
  )

const appPublicRebelrecAboutLazyRoute = appPublicRebelrecAboutLazyImport
  .update({
    id: '/rebelrec/about',
    path: '/rebelrec/about',
    getParentRoute: () => appPublicRoute,
  } as any)
  .lazy(() =>
    import('./routes/(app)/_public/rebelrec.about.lazy').then((d) => d.Route),
  )

const testTestTestARoute = testTestTestAImport.update({
  id: '/test/a_',
  path: '/test/a',
  getParentRoute: () => testTestRoute,
} as any)

const testTestTestASomethingRoute = testTestTestASomethingImport.update({
  id: '/test/a/something',
  path: '/test/a/something',
  getParentRoute: () => testTestRoute,
} as any)

const testTestTestABRoute = testTestTestABImport.update({
  id: '/test/a/b_',
  path: '/test/a/b',
  getParentRoute: () => testTestRoute,
} as any)

const testTestTestABCRoute = testTestTestABCImport.update({
  id: '/test/a/b/c',
  path: '/test/a/b/c',
  getParentRoute: () => testTestRoute,
} as any)

// Populate the FileRoutesByPath interface

declare module '@tanstack/react-router' {
  interface FileRoutesByPath {
    '/': {
      id: '/'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof IndexImport
      parentRoute: typeof rootRoute
    }
    '/(app)': {
      id: '/(app)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appImport
      parentRoute: typeof rootRoute
    }
    '/(app)/_public': {
      id: '/(app)/_public'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof appPublicImport
      parentRoute: typeof appRoute
    }
    '/(auth)/login': {
      id: '/(auth)/login'
      path: '/login'
      fullPath: '/login'
      preLoaderRoute: typeof authLoginImport
      parentRoute: typeof rootRoute
    }
    '/(test)': {
      id: '/(test)'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof testImport
      parentRoute: typeof rootRoute
    }
    '/(test)/_examples': {
      id: '/(test)/_examples'
      path: '/'
      fullPath: '/'
      preLoaderRoute: typeof testExamplesImport
      parentRoute: typeof testRoute
    }
    '/(test)/_test': {
      id: '/(test)/_test'
      path: ''
      fullPath: ''
      preLoaderRoute: typeof testTestImport
      parentRoute: typeof testImport
    }
    '/(app)/privacy': {
      id: '/(app)/privacy'
      path: '/privacy'
      fullPath: '/privacy'
      preLoaderRoute: typeof appPrivacyLazyImport
      parentRoute: typeof appImport
    }
    '/(app)/status': {
      id: '/(app)/status'
      path: '/status'
      fullPath: '/status'
      preLoaderRoute: typeof appStatusLazyImport
      parentRoute: typeof appImport
    }
    '/(app)/terms': {
      id: '/(app)/terms'
      path: '/terms'
      fullPath: '/terms'
      preLoaderRoute: typeof appTermsLazyImport
      parentRoute: typeof appImport
    }
    '/(app)/unauthorized': {
      id: '/(app)/unauthorized'
      path: '/unauthorized'
      fullPath: '/unauthorized'
      preLoaderRoute: typeof appUnauthorizedLazyImport
      parentRoute: typeof appImport
    }
    '/(test)/_test/test_': {
      id: '/(test)/_test/test_'
      path: '/test'
      fullPath: '/test'
      preLoaderRoute: typeof testTestTestImport
      parentRoute: typeof testTestImport
    }
    '/(app)/_public/about': {
      id: '/(app)/_public/about'
      path: '/about'
      fullPath: '/about'
      preLoaderRoute: typeof appPublicAboutLazyImport
      parentRoute: typeof appPublicImport
    }
    '/(app)/_public/contact': {
      id: '/(app)/_public/contact'
      path: '/contact'
      fullPath: '/contact'
      preLoaderRoute: typeof appPublicContactLazyImport
      parentRoute: typeof appPublicImport
    }
    '/(app)/_public/fields': {
      id: '/(app)/_public/fields'
      path: '/fields'
      fullPath: '/fields'
      preLoaderRoute: typeof appPublicFieldsLazyImport
      parentRoute: typeof appPublicImport
    }
    '/(app)/_public/investment': {
      id: '/(app)/_public/investment'
      path: '/investment'
      fullPath: '/investment'
      preLoaderRoute: typeof appPublicInvestmentLazyImport
      parentRoute: typeof appPublicImport
    }
    '/(app)/_public/join': {
      id: '/(app)/_public/join'
      path: '/join'
      fullPath: '/join'
      preLoaderRoute: typeof appPublicJoinLazyImport
      parentRoute: typeof appPublicImport
    }
    '/(app)/_public/mission': {
      id: '/(app)/_public/mission'
      path: '/mission'
      fullPath: '/mission'
      preLoaderRoute: typeof appPublicMissionLazyImport
      parentRoute: typeof appPublicImport
    }
    '/(app)/_public/monster': {
      id: '/(app)/_public/monster'
      path: '/monster'
      fullPath: '/monster'
      preLoaderRoute: typeof appPublicMonsterLazyImport
      parentRoute: typeof appPublicImport
    }
    '/(app)/_public/rebelrec_': {
      id: '/(app)/_public/rebelrec_'
      path: '/rebelrec'
      fullPath: '/rebelrec'
      preLoaderRoute: typeof appPublicRebelrecLazyImport
      parentRoute: typeof appPublicImport
    }
    '/(app)/_public/resources': {
      id: '/(app)/_public/resources'
      path: '/resources'
      fullPath: '/resources'
      preLoaderRoute: typeof appPublicResourcesLazyImport
      parentRoute: typeof appPublicImport
    }
    '/(app)/_public/schedule': {
      id: '/(app)/_public/schedule'
      path: '/schedule'
      fullPath: '/schedule'
      preLoaderRoute: typeof appPublicScheduleLazyImport
      parentRoute: typeof appPublicImport
    }
    '/(app)/_public/teams': {
      id: '/(app)/_public/teams'
      path: '/teams'
      fullPath: '/teams'
      preLoaderRoute: typeof appPublicTeamsLazyImport
      parentRoute: typeof appPublicImport
    }
    '/(app)/_public/tryouts': {
      id: '/(app)/_public/tryouts'
      path: '/tryouts'
      fullPath: '/tryouts'
      preLoaderRoute: typeof appPublicTryoutsLazyImport
      parentRoute: typeof appPublicImport
    }
    '/(test)/_examples/examples_': {
      id: '/(test)/_examples/examples_'
      path: '/examples'
      fullPath: '/examples'
      preLoaderRoute: typeof testExamplesExamplesLazyImport
      parentRoute: typeof testExamplesImport
    }
    '/(test)/_test/test/a_': {
      id: '/(test)/_test/test/a_'
      path: '/test/a'
      fullPath: '/test/a'
      preLoaderRoute: typeof testTestTestAImport
      parentRoute: typeof testTestImport
    }
    '/(app)/_public/rebelrec/about': {
      id: '/(app)/_public/rebelrec/about'
      path: '/rebelrec/about'
      fullPath: '/rebelrec/about'
      preLoaderRoute: typeof appPublicRebelrecAboutLazyImport
      parentRoute: typeof appPublicImport
    }
    '/(app)/_public/rebelrec/cup': {
      id: '/(app)/_public/rebelrec/cup'
      path: '/rebelrec/cup'
      fullPath: '/rebelrec/cup'
      preLoaderRoute: typeof appPublicRebelrecCupLazyImport
      parentRoute: typeof appPublicImport
    }
    '/(app)/_public/rebelrec/faq': {
      id: '/(app)/_public/rebelrec/faq'
      path: '/rebelrec/faq'
      fullPath: '/rebelrec/faq'
      preLoaderRoute: typeof appPublicRebelrecFaqLazyImport
      parentRoute: typeof appPublicImport
    }
    '/(app)/_public/rebelrec/registration': {
      id: '/(app)/_public/rebelrec/registration'
      path: '/rebelrec/registration'
      fullPath: '/rebelrec/registration'
      preLoaderRoute: typeof appPublicRebelrecRegistrationLazyImport
      parentRoute: typeof appPublicImport
    }
    '/(test)/_examples/examples/basic': {
      id: '/(test)/_examples/examples/basic'
      path: '/examples/basic'
      fullPath: '/examples/basic'
      preLoaderRoute: typeof testExamplesExamplesBasicLazyImport
      parentRoute: typeof testExamplesImport
    }
    '/(test)/_examples/examples/colors': {
      id: '/(test)/_examples/examples/colors'
      path: '/examples/colors'
      fullPath: '/examples/colors'
      preLoaderRoute: typeof testExamplesExamplesColorsLazyImport
      parentRoute: typeof testExamplesImport
    }
    '/(test)/_examples/examples/containers': {
      id: '/(test)/_examples/examples/containers'
      path: '/examples/containers'
      fullPath: '/examples/containers'
      preLoaderRoute: typeof testExamplesExamplesContainersLazyImport
      parentRoute: typeof testExamplesImport
    }
    '/(test)/_examples/examples/database': {
      id: '/(test)/_examples/examples/database'
      path: '/examples/database'
      fullPath: '/examples/database'
      preLoaderRoute: typeof testExamplesExamplesDatabaseLazyImport
      parentRoute: typeof testExamplesImport
    }
    '/(test)/_examples/examples/dialogs': {
      id: '/(test)/_examples/examples/dialogs'
      path: '/examples/dialogs'
      fullPath: '/examples/dialogs'
      preLoaderRoute: typeof testExamplesExamplesDialogsLazyImport
      parentRoute: typeof testExamplesImport
    }
    '/(test)/_examples/examples/forms': {
      id: '/(test)/_examples/examples/forms'
      path: '/examples/forms'
      fullPath: '/examples/forms'
      preLoaderRoute: typeof testExamplesExamplesFormsLazyImport
      parentRoute: typeof testExamplesImport
    }
    '/(test)/_examples/examples/loaders': {
      id: '/(test)/_examples/examples/loaders'
      path: '/examples/loaders'
      fullPath: '/examples/loaders'
      preLoaderRoute: typeof testExamplesExamplesLoadersLazyImport
      parentRoute: typeof testExamplesImport
    }
    '/(test)/_examples/examples/navigation': {
      id: '/(test)/_examples/examples/navigation'
      path: '/examples/navigation'
      fullPath: '/examples/navigation'
      preLoaderRoute: typeof testExamplesExamplesNavigationLazyImport
      parentRoute: typeof testExamplesImport
    }
    '/(test)/_examples/examples/query': {
      id: '/(test)/_examples/examples/query'
      path: '/examples/query'
      fullPath: '/examples/query'
      preLoaderRoute: typeof testExamplesExamplesQueryLazyImport
      parentRoute: typeof testExamplesImport
    }
    '/(test)/_examples/examples/tables': {
      id: '/(test)/_examples/examples/tables'
      path: '/examples/tables'
      fullPath: '/examples/tables'
      preLoaderRoute: typeof testExamplesExamplesTablesLazyImport
      parentRoute: typeof testExamplesImport
    }
    '/(test)/_examples/examples/typography': {
      id: '/(test)/_examples/examples/typography'
      path: '/examples/typography'
      fullPath: '/examples/typography'
      preLoaderRoute: typeof testExamplesExamplesTypographyLazyImport
      parentRoute: typeof testExamplesImport
    }
    '/(app)/_public/public/': {
      id: '/(app)/_public/public/'
      path: '/public'
      fullPath: '/public'
      preLoaderRoute: typeof appPublicPublicIndexImport
      parentRoute: typeof appPublicImport
    }
    '/(test)/_test/test/a/b_': {
      id: '/(test)/_test/test/a/b_'
      path: '/test/a/b'
      fullPath: '/test/a/b'
      preLoaderRoute: typeof testTestTestABImport
      parentRoute: typeof testTestImport
    }
    '/(test)/_test/test/a/something': {
      id: '/(test)/_test/test/a/something'
      path: '/test/a/something'
      fullPath: '/test/a/something'
      preLoaderRoute: typeof testTestTestASomethingImport
      parentRoute: typeof testTestImport
    }
    '/(test)/_test/test/a/b/c': {
      id: '/(test)/_test/test/a/b/c'
      path: '/test/a/b/c'
      fullPath: '/test/a/b/c'
      preLoaderRoute: typeof testTestTestABCImport
      parentRoute: typeof testTestImport
    }
  }
}

// Create and export the route tree

interface appPublicRouteChildren {
  appPublicAboutLazyRoute: typeof appPublicAboutLazyRoute
  appPublicContactLazyRoute: typeof appPublicContactLazyRoute
  appPublicFieldsLazyRoute: typeof appPublicFieldsLazyRoute
  appPublicInvestmentLazyRoute: typeof appPublicInvestmentLazyRoute
  appPublicJoinLazyRoute: typeof appPublicJoinLazyRoute
  appPublicMissionLazyRoute: typeof appPublicMissionLazyRoute
  appPublicMonsterLazyRoute: typeof appPublicMonsterLazyRoute
  appPublicRebelrecLazyRoute: typeof appPublicRebelrecLazyRoute
  appPublicResourcesLazyRoute: typeof appPublicResourcesLazyRoute
  appPublicScheduleLazyRoute: typeof appPublicScheduleLazyRoute
  appPublicTeamsLazyRoute: typeof appPublicTeamsLazyRoute
  appPublicTryoutsLazyRoute: typeof appPublicTryoutsLazyRoute
  appPublicRebelrecAboutLazyRoute: typeof appPublicRebelrecAboutLazyRoute
  appPublicRebelrecCupLazyRoute: typeof appPublicRebelrecCupLazyRoute
  appPublicRebelrecFaqLazyRoute: typeof appPublicRebelrecFaqLazyRoute
  appPublicRebelrecRegistrationLazyRoute: typeof appPublicRebelrecRegistrationLazyRoute
  appPublicPublicIndexRoute: typeof appPublicPublicIndexRoute
}

const appPublicRouteChildren: appPublicRouteChildren = {
  appPublicAboutLazyRoute: appPublicAboutLazyRoute,
  appPublicContactLazyRoute: appPublicContactLazyRoute,
  appPublicFieldsLazyRoute: appPublicFieldsLazyRoute,
  appPublicInvestmentLazyRoute: appPublicInvestmentLazyRoute,
  appPublicJoinLazyRoute: appPublicJoinLazyRoute,
  appPublicMissionLazyRoute: appPublicMissionLazyRoute,
  appPublicMonsterLazyRoute: appPublicMonsterLazyRoute,
  appPublicRebelrecLazyRoute: appPublicRebelrecLazyRoute,
  appPublicResourcesLazyRoute: appPublicResourcesLazyRoute,
  appPublicScheduleLazyRoute: appPublicScheduleLazyRoute,
  appPublicTeamsLazyRoute: appPublicTeamsLazyRoute,
  appPublicTryoutsLazyRoute: appPublicTryoutsLazyRoute,
  appPublicRebelrecAboutLazyRoute: appPublicRebelrecAboutLazyRoute,
  appPublicRebelrecCupLazyRoute: appPublicRebelrecCupLazyRoute,
  appPublicRebelrecFaqLazyRoute: appPublicRebelrecFaqLazyRoute,
  appPublicRebelrecRegistrationLazyRoute:
    appPublicRebelrecRegistrationLazyRoute,
  appPublicPublicIndexRoute: appPublicPublicIndexRoute,
}

const appPublicRouteWithChildren = appPublicRoute._addFileChildren(
  appPublicRouteChildren,
)

interface appRouteChildren {
  appPublicRoute: typeof appPublicRouteWithChildren
  appPrivacyLazyRoute: typeof appPrivacyLazyRoute
  appStatusLazyRoute: typeof appStatusLazyRoute
  appTermsLazyRoute: typeof appTermsLazyRoute
  appUnauthorizedLazyRoute: typeof appUnauthorizedLazyRoute
}

const appRouteChildren: appRouteChildren = {
  appPublicRoute: appPublicRouteWithChildren,
  appPrivacyLazyRoute: appPrivacyLazyRoute,
  appStatusLazyRoute: appStatusLazyRoute,
  appTermsLazyRoute: appTermsLazyRoute,
  appUnauthorizedLazyRoute: appUnauthorizedLazyRoute,
}

const appRouteWithChildren = appRoute._addFileChildren(appRouteChildren)

interface testExamplesRouteChildren {
  testExamplesExamplesLazyRoute: typeof testExamplesExamplesLazyRoute
  testExamplesExamplesBasicLazyRoute: typeof testExamplesExamplesBasicLazyRoute
  testExamplesExamplesColorsLazyRoute: typeof testExamplesExamplesColorsLazyRoute
  testExamplesExamplesContainersLazyRoute: typeof testExamplesExamplesContainersLazyRoute
  testExamplesExamplesDatabaseLazyRoute: typeof testExamplesExamplesDatabaseLazyRoute
  testExamplesExamplesDialogsLazyRoute: typeof testExamplesExamplesDialogsLazyRoute
  testExamplesExamplesFormsLazyRoute: typeof testExamplesExamplesFormsLazyRoute
  testExamplesExamplesLoadersLazyRoute: typeof testExamplesExamplesLoadersLazyRoute
  testExamplesExamplesNavigationLazyRoute: typeof testExamplesExamplesNavigationLazyRoute
  testExamplesExamplesQueryLazyRoute: typeof testExamplesExamplesQueryLazyRoute
  testExamplesExamplesTablesLazyRoute: typeof testExamplesExamplesTablesLazyRoute
  testExamplesExamplesTypographyLazyRoute: typeof testExamplesExamplesTypographyLazyRoute
}

const testExamplesRouteChildren: testExamplesRouteChildren = {
  testExamplesExamplesLazyRoute: testExamplesExamplesLazyRoute,
  testExamplesExamplesBasicLazyRoute: testExamplesExamplesBasicLazyRoute,
  testExamplesExamplesColorsLazyRoute: testExamplesExamplesColorsLazyRoute,
  testExamplesExamplesContainersLazyRoute:
    testExamplesExamplesContainersLazyRoute,
  testExamplesExamplesDatabaseLazyRoute: testExamplesExamplesDatabaseLazyRoute,
  testExamplesExamplesDialogsLazyRoute: testExamplesExamplesDialogsLazyRoute,
  testExamplesExamplesFormsLazyRoute: testExamplesExamplesFormsLazyRoute,
  testExamplesExamplesLoadersLazyRoute: testExamplesExamplesLoadersLazyRoute,
  testExamplesExamplesNavigationLazyRoute:
    testExamplesExamplesNavigationLazyRoute,
  testExamplesExamplesQueryLazyRoute: testExamplesExamplesQueryLazyRoute,
  testExamplesExamplesTablesLazyRoute: testExamplesExamplesTablesLazyRoute,
  testExamplesExamplesTypographyLazyRoute:
    testExamplesExamplesTypographyLazyRoute,
}

const testExamplesRouteWithChildren = testExamplesRoute._addFileChildren(
  testExamplesRouteChildren,
)

interface testTestRouteChildren {
  testTestTestRoute: typeof testTestTestRoute
  testTestTestARoute: typeof testTestTestARoute
  testTestTestABRoute: typeof testTestTestABRoute
  testTestTestASomethingRoute: typeof testTestTestASomethingRoute
  testTestTestABCRoute: typeof testTestTestABCRoute
}

const testTestRouteChildren: testTestRouteChildren = {
  testTestTestRoute: testTestTestRoute,
  testTestTestARoute: testTestTestARoute,
  testTestTestABRoute: testTestTestABRoute,
  testTestTestASomethingRoute: testTestTestASomethingRoute,
  testTestTestABCRoute: testTestTestABCRoute,
}

const testTestRouteWithChildren = testTestRoute._addFileChildren(
  testTestRouteChildren,
)

interface testRouteChildren {
  testExamplesRoute: typeof testExamplesRouteWithChildren
  testTestRoute: typeof testTestRouteWithChildren
}

const testRouteChildren: testRouteChildren = {
  testExamplesRoute: testExamplesRouteWithChildren,
  testTestRoute: testTestRouteWithChildren,
}

const testRouteWithChildren = testRoute._addFileChildren(testRouteChildren)

export interface FileRoutesByFullPath {
  '/': typeof testExamplesRouteWithChildren
  '/login': typeof authLoginRoute
  '': typeof testTestRouteWithChildren
  '/privacy': typeof appPrivacyLazyRoute
  '/status': typeof appStatusLazyRoute
  '/terms': typeof appTermsLazyRoute
  '/unauthorized': typeof appUnauthorizedLazyRoute
  '/test': typeof testTestTestRoute
  '/about': typeof appPublicAboutLazyRoute
  '/contact': typeof appPublicContactLazyRoute
  '/fields': typeof appPublicFieldsLazyRoute
  '/investment': typeof appPublicInvestmentLazyRoute
  '/join': typeof appPublicJoinLazyRoute
  '/mission': typeof appPublicMissionLazyRoute
  '/monster': typeof appPublicMonsterLazyRoute
  '/rebelrec': typeof appPublicRebelrecLazyRoute
  '/resources': typeof appPublicResourcesLazyRoute
  '/schedule': typeof appPublicScheduleLazyRoute
  '/teams': typeof appPublicTeamsLazyRoute
  '/tryouts': typeof appPublicTryoutsLazyRoute
  '/examples': typeof testExamplesExamplesLazyRoute
  '/test/a': typeof testTestTestARoute
  '/rebelrec/about': typeof appPublicRebelrecAboutLazyRoute
  '/rebelrec/cup': typeof appPublicRebelrecCupLazyRoute
  '/rebelrec/faq': typeof appPublicRebelrecFaqLazyRoute
  '/rebelrec/registration': typeof appPublicRebelrecRegistrationLazyRoute
  '/examples/basic': typeof testExamplesExamplesBasicLazyRoute
  '/examples/colors': typeof testExamplesExamplesColorsLazyRoute
  '/examples/containers': typeof testExamplesExamplesContainersLazyRoute
  '/examples/database': typeof testExamplesExamplesDatabaseLazyRoute
  '/examples/dialogs': typeof testExamplesExamplesDialogsLazyRoute
  '/examples/forms': typeof testExamplesExamplesFormsLazyRoute
  '/examples/loaders': typeof testExamplesExamplesLoadersLazyRoute
  '/examples/navigation': typeof testExamplesExamplesNavigationLazyRoute
  '/examples/query': typeof testExamplesExamplesQueryLazyRoute
  '/examples/tables': typeof testExamplesExamplesTablesLazyRoute
  '/examples/typography': typeof testExamplesExamplesTypographyLazyRoute
  '/public': typeof appPublicPublicIndexRoute
  '/test/a/b': typeof testTestTestABRoute
  '/test/a/something': typeof testTestTestASomethingRoute
  '/test/a/b/c': typeof testTestTestABCRoute
}

export interface FileRoutesByTo {
  '/': typeof testExamplesRouteWithChildren
  '/login': typeof authLoginRoute
  '': typeof testTestRouteWithChildren
  '/privacy': typeof appPrivacyLazyRoute
  '/status': typeof appStatusLazyRoute
  '/terms': typeof appTermsLazyRoute
  '/unauthorized': typeof appUnauthorizedLazyRoute
  '/test': typeof testTestTestRoute
  '/about': typeof appPublicAboutLazyRoute
  '/contact': typeof appPublicContactLazyRoute
  '/fields': typeof appPublicFieldsLazyRoute
  '/investment': typeof appPublicInvestmentLazyRoute
  '/join': typeof appPublicJoinLazyRoute
  '/mission': typeof appPublicMissionLazyRoute
  '/monster': typeof appPublicMonsterLazyRoute
  '/rebelrec': typeof appPublicRebelrecLazyRoute
  '/resources': typeof appPublicResourcesLazyRoute
  '/schedule': typeof appPublicScheduleLazyRoute
  '/teams': typeof appPublicTeamsLazyRoute
  '/tryouts': typeof appPublicTryoutsLazyRoute
  '/examples': typeof testExamplesExamplesLazyRoute
  '/test/a': typeof testTestTestARoute
  '/rebelrec/about': typeof appPublicRebelrecAboutLazyRoute
  '/rebelrec/cup': typeof appPublicRebelrecCupLazyRoute
  '/rebelrec/faq': typeof appPublicRebelrecFaqLazyRoute
  '/rebelrec/registration': typeof appPublicRebelrecRegistrationLazyRoute
  '/examples/basic': typeof testExamplesExamplesBasicLazyRoute
  '/examples/colors': typeof testExamplesExamplesColorsLazyRoute
  '/examples/containers': typeof testExamplesExamplesContainersLazyRoute
  '/examples/database': typeof testExamplesExamplesDatabaseLazyRoute
  '/examples/dialogs': typeof testExamplesExamplesDialogsLazyRoute
  '/examples/forms': typeof testExamplesExamplesFormsLazyRoute
  '/examples/loaders': typeof testExamplesExamplesLoadersLazyRoute
  '/examples/navigation': typeof testExamplesExamplesNavigationLazyRoute
  '/examples/query': typeof testExamplesExamplesQueryLazyRoute
  '/examples/tables': typeof testExamplesExamplesTablesLazyRoute
  '/examples/typography': typeof testExamplesExamplesTypographyLazyRoute
  '/public': typeof appPublicPublicIndexRoute
  '/test/a/b': typeof testTestTestABRoute
  '/test/a/something': typeof testTestTestASomethingRoute
  '/test/a/b/c': typeof testTestTestABCRoute
}

export interface FileRoutesById {
  __root__: typeof rootRoute
  '/': typeof IndexRoute
  '/(app)': typeof appRouteWithChildren
  '/(app)/_public': typeof appPublicRouteWithChildren
  '/(auth)/login': typeof authLoginRoute
  '/(test)': typeof testRouteWithChildren
  '/(test)/_examples': typeof testExamplesRouteWithChildren
  '/(test)/_test': typeof testTestRouteWithChildren
  '/(app)/privacy': typeof appPrivacyLazyRoute
  '/(app)/status': typeof appStatusLazyRoute
  '/(app)/terms': typeof appTermsLazyRoute
  '/(app)/unauthorized': typeof appUnauthorizedLazyRoute
  '/(test)/_test/test_': typeof testTestTestRoute
  '/(app)/_public/about': typeof appPublicAboutLazyRoute
  '/(app)/_public/contact': typeof appPublicContactLazyRoute
  '/(app)/_public/fields': typeof appPublicFieldsLazyRoute
  '/(app)/_public/investment': typeof appPublicInvestmentLazyRoute
  '/(app)/_public/join': typeof appPublicJoinLazyRoute
  '/(app)/_public/mission': typeof appPublicMissionLazyRoute
  '/(app)/_public/monster': typeof appPublicMonsterLazyRoute
  '/(app)/_public/rebelrec_': typeof appPublicRebelrecLazyRoute
  '/(app)/_public/resources': typeof appPublicResourcesLazyRoute
  '/(app)/_public/schedule': typeof appPublicScheduleLazyRoute
  '/(app)/_public/teams': typeof appPublicTeamsLazyRoute
  '/(app)/_public/tryouts': typeof appPublicTryoutsLazyRoute
  '/(test)/_examples/examples_': typeof testExamplesExamplesLazyRoute
  '/(test)/_test/test/a_': typeof testTestTestARoute
  '/(app)/_public/rebelrec/about': typeof appPublicRebelrecAboutLazyRoute
  '/(app)/_public/rebelrec/cup': typeof appPublicRebelrecCupLazyRoute
  '/(app)/_public/rebelrec/faq': typeof appPublicRebelrecFaqLazyRoute
  '/(app)/_public/rebelrec/registration': typeof appPublicRebelrecRegistrationLazyRoute
  '/(test)/_examples/examples/basic': typeof testExamplesExamplesBasicLazyRoute
  '/(test)/_examples/examples/colors': typeof testExamplesExamplesColorsLazyRoute
  '/(test)/_examples/examples/containers': typeof testExamplesExamplesContainersLazyRoute
  '/(test)/_examples/examples/database': typeof testExamplesExamplesDatabaseLazyRoute
  '/(test)/_examples/examples/dialogs': typeof testExamplesExamplesDialogsLazyRoute
  '/(test)/_examples/examples/forms': typeof testExamplesExamplesFormsLazyRoute
  '/(test)/_examples/examples/loaders': typeof testExamplesExamplesLoadersLazyRoute
  '/(test)/_examples/examples/navigation': typeof testExamplesExamplesNavigationLazyRoute
  '/(test)/_examples/examples/query': typeof testExamplesExamplesQueryLazyRoute
  '/(test)/_examples/examples/tables': typeof testExamplesExamplesTablesLazyRoute
  '/(test)/_examples/examples/typography': typeof testExamplesExamplesTypographyLazyRoute
  '/(app)/_public/public/': typeof appPublicPublicIndexRoute
  '/(test)/_test/test/a/b_': typeof testTestTestABRoute
  '/(test)/_test/test/a/something': typeof testTestTestASomethingRoute
  '/(test)/_test/test/a/b/c': typeof testTestTestABCRoute
}

export interface FileRouteTypes {
  fileRoutesByFullPath: FileRoutesByFullPath
  fullPaths:
    | '/'
    | '/login'
    | ''
    | '/privacy'
    | '/status'
    | '/terms'
    | '/unauthorized'
    | '/test'
    | '/about'
    | '/contact'
    | '/fields'
    | '/investment'
    | '/join'
    | '/mission'
    | '/monster'
    | '/rebelrec'
    | '/resources'
    | '/schedule'
    | '/teams'
    | '/tryouts'
    | '/examples'
    | '/test/a'
    | '/rebelrec/about'
    | '/rebelrec/cup'
    | '/rebelrec/faq'
    | '/rebelrec/registration'
    | '/examples/basic'
    | '/examples/colors'
    | '/examples/containers'
    | '/examples/database'
    | '/examples/dialogs'
    | '/examples/forms'
    | '/examples/loaders'
    | '/examples/navigation'
    | '/examples/query'
    | '/examples/tables'
    | '/examples/typography'
    | '/public'
    | '/test/a/b'
    | '/test/a/something'
    | '/test/a/b/c'
  fileRoutesByTo: FileRoutesByTo
  to:
    | '/'
    | '/login'
    | ''
    | '/privacy'
    | '/status'
    | '/terms'
    | '/unauthorized'
    | '/test'
    | '/about'
    | '/contact'
    | '/fields'
    | '/investment'
    | '/join'
    | '/mission'
    | '/monster'
    | '/rebelrec'
    | '/resources'
    | '/schedule'
    | '/teams'
    | '/tryouts'
    | '/examples'
    | '/test/a'
    | '/rebelrec/about'
    | '/rebelrec/cup'
    | '/rebelrec/faq'
    | '/rebelrec/registration'
    | '/examples/basic'
    | '/examples/colors'
    | '/examples/containers'
    | '/examples/database'
    | '/examples/dialogs'
    | '/examples/forms'
    | '/examples/loaders'
    | '/examples/navigation'
    | '/examples/query'
    | '/examples/tables'
    | '/examples/typography'
    | '/public'
    | '/test/a/b'
    | '/test/a/something'
    | '/test/a/b/c'
  id:
    | '__root__'
    | '/'
    | '/(app)'
    | '/(app)/_public'
    | '/(auth)/login'
    | '/(test)'
    | '/(test)/_examples'
    | '/(test)/_test'
    | '/(app)/privacy'
    | '/(app)/status'
    | '/(app)/terms'
    | '/(app)/unauthorized'
    | '/(test)/_test/test_'
    | '/(app)/_public/about'
    | '/(app)/_public/contact'
    | '/(app)/_public/fields'
    | '/(app)/_public/investment'
    | '/(app)/_public/join'
    | '/(app)/_public/mission'
    | '/(app)/_public/monster'
    | '/(app)/_public/rebelrec_'
    | '/(app)/_public/resources'
    | '/(app)/_public/schedule'
    | '/(app)/_public/teams'
    | '/(app)/_public/tryouts'
    | '/(test)/_examples/examples_'
    | '/(test)/_test/test/a_'
    | '/(app)/_public/rebelrec/about'
    | '/(app)/_public/rebelrec/cup'
    | '/(app)/_public/rebelrec/faq'
    | '/(app)/_public/rebelrec/registration'
    | '/(test)/_examples/examples/basic'
    | '/(test)/_examples/examples/colors'
    | '/(test)/_examples/examples/containers'
    | '/(test)/_examples/examples/database'
    | '/(test)/_examples/examples/dialogs'
    | '/(test)/_examples/examples/forms'
    | '/(test)/_examples/examples/loaders'
    | '/(test)/_examples/examples/navigation'
    | '/(test)/_examples/examples/query'
    | '/(test)/_examples/examples/tables'
    | '/(test)/_examples/examples/typography'
    | '/(app)/_public/public/'
    | '/(test)/_test/test/a/b_'
    | '/(test)/_test/test/a/something'
    | '/(test)/_test/test/a/b/c'
  fileRoutesById: FileRoutesById
}

export interface RootRouteChildren {
  IndexRoute: typeof IndexRoute
  appRoute: typeof appRouteWithChildren
  authLoginRoute: typeof authLoginRoute
  testRoute: typeof testRouteWithChildren
}

const rootRouteChildren: RootRouteChildren = {
  IndexRoute: IndexRoute,
  appRoute: appRouteWithChildren,
  authLoginRoute: authLoginRoute,
  testRoute: testRouteWithChildren,
}

export const routeTree = rootRoute
  ._addFileChildren(rootRouteChildren)
  ._addFileTypes<FileRouteTypes>()

/* ROUTE_MANIFEST_START
{
  "routes": {
    "__root__": {
      "filePath": "__root.tsx",
      "children": [
        "/",
        "/(app)",
        "/(auth)/login",
        "/(test)"
      ]
    },
    "/": {
      "filePath": "index.tsx"
    },
    "/(app)": {
      "filePath": "(app)",
      "children": [
        "/(app)/_public",
        "/(app)/privacy",
        "/(app)/status",
        "/(app)/terms",
        "/(app)/unauthorized"
      ]
    },
    "/(app)/_public": {
      "filePath": "(app)/_public.tsx",
      "parent": "/(app)",
      "children": [
        "/(app)/_public/about",
        "/(app)/_public/contact",
        "/(app)/_public/fields",
        "/(app)/_public/investment",
        "/(app)/_public/join",
        "/(app)/_public/mission",
        "/(app)/_public/monster",
        "/(app)/_public/rebelrec_",
        "/(app)/_public/resources",
        "/(app)/_public/schedule",
        "/(app)/_public/teams",
        "/(app)/_public/tryouts",
        "/(app)/_public/rebelrec/about",
        "/(app)/_public/rebelrec/cup",
        "/(app)/_public/rebelrec/faq",
        "/(app)/_public/rebelrec/registration",
        "/(app)/_public/public/"
      ]
    },
    "/(auth)/login": {
      "filePath": "(auth)/login.tsx"
    },
    "/(test)": {
      "filePath": "(test)",
      "children": [
        "/(test)/_examples",
        "/(test)/_test"
      ]
    },
    "/(test)/_examples": {
      "filePath": "(test)/_examples.tsx",
      "parent": "/(test)",
      "children": [
        "/(test)/_examples/examples_",
        "/(test)/_examples/examples/basic",
        "/(test)/_examples/examples/colors",
        "/(test)/_examples/examples/containers",
        "/(test)/_examples/examples/database",
        "/(test)/_examples/examples/dialogs",
        "/(test)/_examples/examples/forms",
        "/(test)/_examples/examples/loaders",
        "/(test)/_examples/examples/navigation",
        "/(test)/_examples/examples/query",
        "/(test)/_examples/examples/tables",
        "/(test)/_examples/examples/typography"
      ]
    },
    "/(test)/_test": {
      "filePath": "(test)/_test.tsx",
      "parent": "/(test)",
      "children": [
        "/(test)/_test/test_",
        "/(test)/_test/test/a_",
        "/(test)/_test/test/a/b_",
        "/(test)/_test/test/a/something",
        "/(test)/_test/test/a/b/c"
      ]
    },
    "/(app)/privacy": {
      "filePath": "(app)/privacy.lazy.tsx",
      "parent": "/(app)"
    },
    "/(app)/status": {
      "filePath": "(app)/status.lazy.tsx",
      "parent": "/(app)"
    },
    "/(app)/terms": {
      "filePath": "(app)/terms.lazy.tsx",
      "parent": "/(app)"
    },
    "/(app)/unauthorized": {
      "filePath": "(app)/unauthorized.lazy.tsx",
      "parent": "/(app)"
    },
    "/(test)/_test/test_": {
      "filePath": "(test)/_test/test_.tsx",
      "parent": "/(test)/_test"
    },
    "/(app)/_public/about": {
      "filePath": "(app)/_public/about.lazy.tsx",
      "parent": "/(app)/_public"
    },
    "/(app)/_public/contact": {
      "filePath": "(app)/_public/contact.lazy.tsx",
      "parent": "/(app)/_public"
    },
    "/(app)/_public/fields": {
      "filePath": "(app)/_public/fields.lazy.tsx",
      "parent": "/(app)/_public"
    },
    "/(app)/_public/investment": {
      "filePath": "(app)/_public/investment.lazy.tsx",
      "parent": "/(app)/_public"
    },
    "/(app)/_public/join": {
      "filePath": "(app)/_public/join.lazy.tsx",
      "parent": "/(app)/_public"
    },
    "/(app)/_public/mission": {
      "filePath": "(app)/_public/mission.lazy.tsx",
      "parent": "/(app)/_public"
    },
    "/(app)/_public/monster": {
      "filePath": "(app)/_public/monster.lazy.tsx",
      "parent": "/(app)/_public"
    },
    "/(app)/_public/rebelrec_": {
      "filePath": "(app)/_public/rebelrec_.lazy.tsx",
      "parent": "/(app)/_public"
    },
    "/(app)/_public/resources": {
      "filePath": "(app)/_public/resources.lazy.tsx",
      "parent": "/(app)/_public"
    },
    "/(app)/_public/schedule": {
      "filePath": "(app)/_public/schedule.lazy.tsx",
      "parent": "/(app)/_public"
    },
    "/(app)/_public/teams": {
      "filePath": "(app)/_public/teams.lazy.tsx",
      "parent": "/(app)/_public"
    },
    "/(app)/_public/tryouts": {
      "filePath": "(app)/_public/tryouts.lazy.tsx",
      "parent": "/(app)/_public"
    },
    "/(test)/_examples/examples_": {
      "filePath": "(test)/_examples/examples_.lazy.tsx",
      "parent": "/(test)/_examples"
    },
    "/(test)/_test/test/a_": {
      "filePath": "(test)/_test/test.a_.tsx",
      "parent": "/(test)/_test"
    },
    "/(app)/_public/rebelrec/about": {
      "filePath": "(app)/_public/rebelrec.about.lazy.tsx",
      "parent": "/(app)/_public"
    },
    "/(app)/_public/rebelrec/cup": {
      "filePath": "(app)/_public/rebelrec.cup.lazy.tsx",
      "parent": "/(app)/_public"
    },
    "/(app)/_public/rebelrec/faq": {
      "filePath": "(app)/_public/rebelrec.faq.lazy.tsx",
      "parent": "/(app)/_public"
    },
    "/(app)/_public/rebelrec/registration": {
      "filePath": "(app)/_public/rebelrec.registration.lazy.tsx",
      "parent": "/(app)/_public"
    },
    "/(test)/_examples/examples/basic": {
      "filePath": "(test)/_examples/examples.basic.lazy.tsx",
      "parent": "/(test)/_examples"
    },
    "/(test)/_examples/examples/colors": {
      "filePath": "(test)/_examples/examples.colors.lazy.tsx",
      "parent": "/(test)/_examples"
    },
    "/(test)/_examples/examples/containers": {
      "filePath": "(test)/_examples/examples.containers.lazy.tsx",
      "parent": "/(test)/_examples"
    },
    "/(test)/_examples/examples/database": {
      "filePath": "(test)/_examples/examples.database.lazy.tsx",
      "parent": "/(test)/_examples"
    },
    "/(test)/_examples/examples/dialogs": {
      "filePath": "(test)/_examples/examples.dialogs.lazy.tsx",
      "parent": "/(test)/_examples"
    },
    "/(test)/_examples/examples/forms": {
      "filePath": "(test)/_examples/examples.forms.lazy.tsx",
      "parent": "/(test)/_examples"
    },
    "/(test)/_examples/examples/loaders": {
      "filePath": "(test)/_examples/examples.loaders.lazy.tsx",
      "parent": "/(test)/_examples"
    },
    "/(test)/_examples/examples/navigation": {
      "filePath": "(test)/_examples/examples.navigation.lazy.tsx",
      "parent": "/(test)/_examples"
    },
    "/(test)/_examples/examples/query": {
      "filePath": "(test)/_examples/examples.query.lazy.tsx",
      "parent": "/(test)/_examples"
    },
    "/(test)/_examples/examples/tables": {
      "filePath": "(test)/_examples/examples.tables.lazy.tsx",
      "parent": "/(test)/_examples"
    },
    "/(test)/_examples/examples/typography": {
      "filePath": "(test)/_examples/examples.typography.lazy.tsx",
      "parent": "/(test)/_examples"
    },
    "/(app)/_public/public/": {
      "filePath": "(app)/_public/public.index.tsx",
      "parent": "/(app)/_public"
    },
    "/(test)/_test/test/a/b_": {
      "filePath": "(test)/_test/test.a.b_.tsx",
      "parent": "/(test)/_test"
    },
    "/(test)/_test/test/a/something": {
      "filePath": "(test)/_test/test.a.something.tsx",
      "parent": "/(test)/_test"
    },
    "/(test)/_test/test/a/b/c": {
      "filePath": "(test)/_test/test.a.b.c.tsx",
      "parent": "/(test)/_test"
    }
  }
}
ROUTE_MANIFEST_END */
